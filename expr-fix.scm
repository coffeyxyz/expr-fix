(import (chicken format)
        (chicken io)
        (chicken port)
        (chicken process-context))

(define (root tree)
  (cond ((null? tree) '())
        ((list? tree) (car tree))
        (else tree)))

(define (left tree)
  (if (or (not (list? tree))
          (null? tree)
          (null? (cdr tree)))
      '()
      (cadr tree)))

(define (right tree)
  (if (or (not (list? tree))
          (null? tree)
          (null? (cdr tree))
          (null? (cddr tree)))
      '()
      (caddr tree)))

(define (traverse order tree)
  (define (preorder tree)
    (unless (null? tree)
      (format #t "~A " (root tree))
      (preorder (left tree))
      (preorder (right tree))))
  (define (inorder tree)
    (unless (null? tree)
      (inorder (left tree))
      (format #t "~A " (root tree))
      (inorder (right tree))))
  (define (postorder tree)
    (unless (null? tree)
      (postorder (left tree))
      (postorder (right tree))
      (format #t "~A " (root tree))))
  (let* ((str (with-output-to-string
                (lambda ()
                  (case order
                    ((preorder) (preorder tree))
                    ((inorder) (inorder tree))
                    ((postorder) (postorder tree))))))
         (len (string-length str)))
    (if (> len 0)
        (substring str 0 (- len 1))
        str)))

(define (main args)
  (define input-fix)
  (define output-fix)

  (let ((len (length args)))
    (if (not (= len 2))
        (begin (format #t "expr-fix: Invalid argument count: ~A~%~
                           Usage: expr-fix INPUT_FIX OUTPUT_FIX~%"
                       len)
               (exit 1))
        (begin (set! input-fix (car args))
               (set! output-fix (cadr args)))))

  (format #t "~A -> ~A~%" input-fix output-fix)

  (let repl ((i 0))
    (format #t "~A> " i)
    (let ((line (read-line)))
      (format #t "-> ~A~%" line))
    (repl (+ i 1))))

(main (command-line-arguments))
