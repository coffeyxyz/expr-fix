;;;; parser.scm - Mathematical expression parser.

(declare (unit parser)
         (uses stack)
         (uses tree))

;; Convert a list of tokens into a parse tree.
(define (parse-xpr fix tokens)
  (define (prefix tokens)
    (make-tree (let ((token (car tokens)))
                 (set! (car tokens) #f)
                 (token-value token))
               (if (token-operator? (cadr tokens))
                   (prefix (cdr tokens))
                   (let ((token (cadr tokens)))
                     (set! (cadr tokens) #f)
                     (make-tree (token-value token))))
               (let loop ((i 2))
                 (if (list-ref tokens i)
                     (if (token-operator? (list-ref tokens i))
                         (prefix (list-tail tokens i))
                         (let ((token (list-ref tokens i)))
                           (set! (list-ref tokens i) #f)
                           (make-tree (token-value token))))
                     (loop (+ i 1))))))

  ;;(define (infix tokens)
  ;;  )

  (define (postfix tokens)
    (define stack (make-stack '()))
    (let loop ((tokens tokens))
      (unless (null? tokens)
        (let ((token (car tokens)))
          (if (token-operator? token)
              (let* ((left-element (stack-top-n stack 1))
                     (right-element (stack-top-n stack 0))
                     (left-tree (if (tree? left-element)
                                    left-element
                                    (make-tree left-element)))
                     (right-tree (if (tree? right-element)
                                     right-element
                                     (make-tree right-element))))
                (set! stack (stack-pop-n stack 2))
                (set! stack (stack-push stack
                                        (make-tree (token-value token)
                                                   left-tree right-tree))))
              (set! stack (stack-push stack (token-value token)))))
        (loop (cdr tokens))))
    (if (and (= (stack-length stack) 1)
             (tree? (stack-top stack)))
        (stack-top stack)
        (error "parse-xpr: postfix: Invalid expression")))

  (if (and (= (length tokens) 1)
           (eq? (token-type (car tokens)) 'number))
      (make-tree (token-value (car tokens)))
      (case fix
        ((prefix) (prefix tokens))
        ;;((infix) (infix tokens))
        ((postfix) (postfix tokens)))))
